#!/usr/bin/env bash

version="1.2.0"

_mainScript_() {

  _errorHandling_() {
    # This script requires the Linux gdate (as opposed to native 'date' in OSX)
    # Here we see if it's installed. If not, we install it with homebrew.
    if ! command -v dirname &>/dev/null; then
      warning "Need 'dirname' to continue. Installing via homebrew."
      brew install coreutils
      success "'coreutils' package installed. Exiting."
      _safeExit_ "1"
    fi
  }
  _errorHandling_

  links=("${args[@]}")

  [[ ${#links[@]} == 0 ]] && {
    notice "No link specified"
    _safeExit_
  }

  # Work through the links
  for link in "${links[@]}"; do

    # Confirm link is actually a symlink
    [ -h "${link}" ] || die "'${link}': either does not exist or is not a symlink."

    dir=$(dirname "${link}")
    reltarget=$(readlink "${link}")
    case "${reltarget}" in
      /*) abstarget="${reltarget}" ;;
      *) abstarget="${dir}"/"${reltarget}" ;;
    esac
    if [ -e "${abstarget}" ]; then
      _execute_ "rm -f \"${link}\""
      _execute_ "cp -rf \"${abstarget}\" \"${link}\"" "Original file copied and symlink removed"
    else
      if _seekConfirmation_ "Can't find original, delete this link anyway?"; then
        _execute_ "rm -f \"${link}\"" "Symlink removed"
      fi
    fi

    # If requested, remove the originating file
    if ${replaceSymlink}; then
      if _seekConfirmation_ "Delete originating file?"; then
        _execute_ "rm -rf \"${abstarget}\""
      fi
    fi
  done

}

# Set Base Variables
# ----------------------
scriptName=$(basename "$0")

# Set Flags
quiet=false
printLog=false
logErrors=true
verbose=false
force=false
strict=false
dryrun=false
debug=false
sourceOnly=false
args=()

replaceSymlink=false

_sourceHelperFiles_() {
  local filesToSource
  local sourceFile

  filesToSource=(
    '${HOME}/dotfiles/scripting/helpers/baseHelpers.bash'
  )

  for sourceFile in "${filesToSource[@]}"; do
    [ ! -f "$sourceFile" ] \
      && {
        echo "error: Can not find sourcefile '$sourceFile'. Exiting."
        exit 1
      }

    source "$sourceFile"
  done
}
_sourceHelperFiles_

# Options and Usage
# -----------------------------------
usage() {
  echo -n "${scriptName} [OPTION]... [FILE]...

This script will replace symbolic links with their original file.  By default it will COPY
a version of the original file over the symlink's location.  Specifying the flag '-r' will
delete the source file of the symlink after copying itself to the symlink's location.

 ${bold}Options:${reset}
  -r, --replace     Replaces the symlink with the original file AND removes the
                    original after copying

  -L, --noErrorLog  Print log level error and fatal to a log (default 'true')
  -l, --log         Print log to file
  -n, --dryrun      Non-destructive. Makes no permanent changes.
  -q, --quiet       Quiet (no output)
  -s, --strict      Exit script with null variables.  i.e 'set -o nounset'
  -v, --verbose     Output more information. (Items echoed to 'verbose')
  -d, --debug       Runs script in BASH debug mode (set -x)
  -h, --help        Display this help and exit
      --version     Output version information and exit
      --source-only Bypasses main script functionality to allow unit tests of functions
      --force       Skip all user interaction.  Implied 'Yes' to all actions.
"
}

# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
    # If option is of type -ab
    -[!-]?*)
      # Loop over each character starting with the second
      for ((i = 1; i < ${#1}; i++)); do
        c=${1:i:1}

        # Add current char to options
        options+=("-$c")

        # If option takes a required argument, and it's not the last char make
        # the rest of the string its argument
        if [[ $optstring == *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;

    # If option is of type --foo=bar
    --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
    # add --endopts for --
    --) options+=(--endopts) ;;
    # Otherwise, nothing special
    *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

# Print help if no arguments were passed.
# Uncomment to force arguments when invoking the script
# -------------------------------------
[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 == -?* ]]; do
  case $1 in
    -r | --replace) replaceSymlink=true ;;
    -L | --noErrorLog) logErrors=false ;;
    -h | --help)
      usage >&2
      _safeExit_
      ;;
    --version)
      echo "$(basename $0) ${version}"
      _safeExit_
      ;;
    -n | --dryrun) dryrun=true ;;
    -v | --verbose) verbose=true ;;
    -q | --quiet) quiet=true ;;
    -s | --strict) strict=true ;;
    -d | --debug) debug=true ;;
    --source-only) sourceOnly=true ;;
    --force) force=true ;;
    --endopts)
      shift
      break
      ;;
    *) die "invalid option: '$1'." ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# Trap bad exits with your cleanup function
trap '_trapCleanup_ $LINENO $BASH_LINENO "$BASH_COMMAND" "${FUNCNAME[*]}" "$0" "${BASH_SOURCE[0]}"' \
  EXIT INT TERM SIGINT SIGQUIT ERR

# Set IFS to preferred implementation
IFS=$' \n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
# if using the 'execute' function this must be disabled for warnings to be shown if tasks fail
#set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x; fi

# Exit on empty variable
if ${strict}; then set -o nounset; fi

# Run your script unless in 'source-only' mode
if ! ${sourceOnly}; then _mainScript_; fi

# Exit cleanly
if ! ${sourceOnly}; then _safeExit_; fi
